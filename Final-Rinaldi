//Project 5 Final by Nikoli Rinaldi
//CST 112 with professor BAM!


float horizon;
float hmin, hmax;
float wmin, wmax;
float alpha = 0;       //for help screen
float sunx;

boolean array = true;

int cloudsn = 7;
int many = 11;  //number of people

Cloud[] clouds = new Cloud[cloudsn];  //starting people and clouds
Person[] people = new Person[many];    //setting up 2 Person arrays, people and nik
Person[] nik = new Person[many];

//list of names for the people
String[] names = {"Emma", "Noah", "Olivia", "Liam", "Sophia", "Mason", "Isabella", "Jacob", "Ava",
"William", "Mia", "Ethan", "Emily", "Michael", "Abigail", "Madison", "James", "Daniel", "Alex", "Harper",
"Elijah", "Sofia", "Ben", "Avery", "Logan", "Liz", "Beth", "Aiden", "Amelia", "Jayden", "Evelyn", "Matthew",
"Ellah", "Jack", "Jackson", "Matt", "Chloe", "David"};

Button help,quit,randomize,tallest,widest,fattest,order,change,raise,bonus;  //buttons
Bird tweet;   //birds






void setup(){
  
  size(750,550);
  
  horizon = height/1.5;    //setting horizon
  
  sunx = 0;    //starting sun/moon position
  
  //people sizes
  hmin = 100;      //the people's height and width follow a bell curve similar to real life
  hmax = 250;      //put what you would like to be the smallest and largest values the people can be
  wmin = 25;       //the people will most likely be directly between the two numbers
  wmax = 45;
    
  help = new Button(width/2 + width/2.5, height - height/16, "help");                   //position and names of buttons
  quit = new Button(width/2 + width/2.5 -60, height - height/16, "quit");
  randomize = new Button(width/2 + width/2.5 -120, height - height/16, "random");
  order = new Button(width*2 + width*2.5 -180, height - height/16, "order");
  tallest = new Button(width/2 + width/2.5 -240, height - height/16, "tallest");
  widest = new Button(width/2 + width/2.5 -300, height - height/16, "widest");
  fattest = new Button(width/2 + width/2.5 -360, height - height/16, "fattest"); 
  change = new Button(width/2 + width/2.5 - 180 , height - height/16, "change");
  
  raise = new Button(width/2 + width/2.5 - 30 , height - height/16 -60, "raise");
  bonus = new Button(width/2 + width/2.5 + 30 , height - height/16 -60, "bonus");
  
  tweet = new Bird();   //setting up bird
  tweet.startup();
  
  peopleStartup();    //setting up people then clouds
  cloudStartup();

}
  
 
void draw(){
  scene();
  show();
  numbers();
  messages();
  help();
}  
  
  
  
void cloudStartup(){
  

  float wide = 0;
  float x = -100;
  float y = 0;
  
  cloudsn = int( random(1, 7.5));       //clouds start with random width and y coordinate
  wide = random(150,200);
  y = random(horizon/2);
  
  for(int n = 0; n < clouds.length; n++){
    clouds[n] = new Cloud(wide - n*20, x - n*100, y + n*50);    //each one gets smaller and moves downward and leftward
  }
}
  
void peopleStartup(){
    for(int n = 0; n < many; n++){
    people[n] = new Person();    //initializing people
    nik[n] = new Person();     // initializing nik
    people[n].startup();
    nik[n].startup();
  }
  
  for(int n = 0; n < many; n++){ 
    people[n].x = 50 + (n * 50);    //placing people
    nik[n].x = 50 + (n * 50);    //placing nik
  }
}
  




void scene(){  
  noStroke();
  if( array == true){
    rectMode(CORNER);
    fill(116,203,232);              //blue sky
    rect(0,0, width, horizon);
  } else {
    rectMode(CORNER);
    fill(75,100,200);              //night sky for new array
    rect(0,0, width, horizon);
  }
  
  sunx += .5;
  
  if( array == true){
    fill(240,236,0);                      //yellow sun
    ellipse(sunx, horizon/2, 50,50);
  } else {
    noStroke();
    fill(220,220,220);                  //white moon
    ellipse(sunx, horizon/2, 50,50);
    fill(200,200,200,220);                    //with some craters
    ellipse(sunx -10, horizon/2 -10, 15,15);
    ellipse(sunx +13, horizon/2 +7, 10,10);
    ellipse(sunx-5, horizon /2 +8, 20,20);
  }  
  
  
  for(int n = 0; n < cloudsn; n++){   //clouds running
    clouds[n].movement();
    clouds[n].show();
  }
  
  fill(0,180,0);
  rect(0,horizon,width,height);  //ground
  
  fill(0,100,0);      //grass color and width
  stroke(0,100,0);
  strokeWeight(3);
  for( int n = 0; n < width + 25; n+=15){
    if( array == false){
      line(-15+n, height, 0+n, height - 16);  //right leaning for new
    } else if(array == true){
      line(15+n, height, 0+n, height - 16);    //left leaning for old
    }
    
  }
  
  fill(0);            //These lines represents minimum, median, and maximum shoulder heights in black 
  stroke(0,0,0,50);
  strokeWeight(1);
  for(int n = 0; n<3; n++){
    line(0, (horizon - hmin - (n * ((hmax - hmin)/2))), width, (horizon - hmin - (n * ((hmax - hmin)/2))));
  }
  
  stroke(255,0,0,50);         //These red lines roughly represent 1st and 3rd quartiles
  for(int n = 0; n<2; n++){
    line(0, (horizon - hmin - ((hmax - hmin)/4) - (n * ((hmax - hmin)/2))), width, (horizon - hmin - ((hmax - hmin)/4) - (n * ((hmax - hmin)/2))));
  }
}
  

void show(){
  
  if (array == true){
    for(int n = 0; n < many; n++){       //showing people
      people[n].position();
      people[n].show();
    }
  }else{
    for(int n = 0; n < many; n++){       //showing nik
      nik[n].position();
      nik[n].show();
      }
    }
  
  tweet.movement();
  
  help.show();    //showing buttons
  quit.show();
  randomize.show();
  order.show();
  tallest.show();
  widest.show();
  fattest.show();
  order.show();
  change.show();
  raise.show();
  bonus.show();
}





void messages(){      //title
 fill(0);
 textSize(20);
 text("Project 5", 20,30);
 textSize(12);
 text("By Nikoli Rinaldi", 20, 50);
}






void help(){     //eventually will be help screen
  
   fill(100, 100, 100, alpha);    //gray background, whether or not it is visible depends on alpha
   rectMode(CORNER);
   rect(0,0, width, height);
   
   fill(255,255,255,alpha);        //white text
   
   textSize(40);
   
   String d = "HELP";                //help title
   text( d, 40, 40);
   
   textSize(12);
   
   text("Press any of the buttons to do their actions", 50,80);       //controls
   text("Press 't' to move tallest to the end", 50, 100);
   text("Press 'w' to move widest to the end", 50, 120);
   text("Press 'f' to move fattest to the end", 50,140);
   text("Press 'r' to randomize people", 50, 160);
   text("Press 'c' to reset clouds", 50, 200);
   text("Press 'b' to reset bird", 50,  220);
   text("Press '?' to toggle help screen", 50,240);
   text("Press 'q' to quit", 50, 260);
   
   String b = "Project 5 by Nikoli Rinaldi:\n Two random sets of freakishly tall\n people are generated with random qualities.\n Their height and width follow bell curves.\n The black lines represent maximum and minimum\n heights possible.\n The red lines represnt first and third quartiles.\n The bird lands on the shoulder of the tallest person.";
   text( b, width/2, height/16);      //summary
   
   help.show();    //help button shows on the help screen
}






void keyPressed(){        //executing statements if specific buttons is pressed
  if (key == 'r'){
      peopleStartup();    //randomizing
  }
  
  if (key == 't'){
    if( array == true){            //shifting tallest person to the end
      tallest(people);
    } else if(array == false){
      tallest(nik);
    }
  }
  
  if (key == 'b'){      //reseting bird
   tweet.startup(); 
  }
  
  if (key == '1'){
    if( array == true){          //giving everyone a raise (if 18 or older)
      raise(people);
    } else if(array == false){
      raise(nik);
    } 
  }
  
  if (key == '2'){            //giving everyone a bonus (if 18 or older)
    if( array == true){
      bonus(people);
    } else if(array == false){
      bonus(nik);
    }
  }
  
  if (key == '3'){
    tweet.startup();
    if( array == true){            //toggling the people
      array = false;
    } else if(array == false){
      array = true;
    } 
  }
  
  if (key == 'w'){
    if( array == true){            //shifting widest to the end
      width(people);
    } else if(array == false){
      width(nik);
    }
  }
  
  if (key == 'f'){
    if( array == true){          //shifting heaviest to the end
      fattest(people);
    } else if(array == false){
      fattest(nik);
    }
  }
  
  if (key == 'o'){
    if( array == true){          //order is defunct
      
    } else if(array == false){
      
    }
  }
  
  if (key == 'c'){
   cloudStartup(); 
  }
  
  if (key == '?'){    //eventually when hitting '?' will bring up various information and controls
    if (alpha > 254){
       alpha = 0;
    }else{
      alpha = 255;
    }
  }
}



void mousePressed(){    //called when mouse is pressed
  
  help.press();         //checks to see if a buttons is pressed
  quit.press();
  randomize.press();
  order.press();
  tallest.press();
  widest.press();
  fattest.press();
  change.press();
  raise.press();
  bonus.press();
  
 //executes statement of specific button pressed
  
  if(bonus.press == true){
    if( array == true){
      bonus(people);
    } else if(array == false){      //bonus button
      bonus(nik);
    }
  }
  
  if(help.press == true){
    if (alpha > 254){            //help button
       alpha = 0;
    }else{
      alpha = 255;
    }
  }
  
  if(raise.press == true){
    if( array == true){            //raise button
      raise(people);
    } else if(array == false){
      raise(nik);
    }
  }
  
  if( change.press == true){
    tweet.startup();
    if( array == true){
      array = false;                //change array button
    } else if(array == false){
      array = true;
    }
  }
  
  if( order.press == true){
    if( array == true){
      
    } else if(array == false){      //defunct order button(because each person has their own x and y)
      
    }
  }
  
  if( tallest.press == true){
    if( array == true){
      tallest(people);
    } else if(array == false){      //tallest button
      tallest(nik);
    }
  }
  
  if( widest.press == true){
     if( array == true){
      width(people);                  //widest button
    } else if(array == false){
      width(nik);
    }
  }
  
  if( fattest.press == true){
    if( array == true){
      fattest(people);
    } else if(array == false){      //fattest button
      fattest(nik);
    }
  }
  
  if( randomize.press == true){      //randomize button
      peopleStartup();
  }
  
  if(quit.press == true){        //exit button
    exit();
  } 
}


void order(Person[] a){       //order routine that does not work, winds up bumping loops of people in a circle
  boolean copy = true;
  int apos,bpos;
  
  for (int n = 0; n < a.length - 1; n++){
   if (a[n].h > a[n+1].h){
     copy = false;
     apos = n;
     bpos = n+1;
     swapping(people, apos, bpos);
   }
  }
  
  
  if (copy != false){
    order(a);
  }
}


void raise(Person a[]){
  for(int n = 0; n < a.length; n++){    //raise routine
      if( a[n].salary < 25000){         //a person with 25k or less  will get a 5% raise 4 times
        a[n].salary *= 1.05;
      }
      if( a[n].salary < 50000){         //a person with 25k - 50k will get a 5% raise 3 times
        a[n].salary *= 1.05;
      }
      if(a[n].salary < 75000){          //a person with 50k - 75k will get a 5% raise twice
        a[n].salary *= 1.05;
      }
      if(a[n].salary < 1000000000){      //a person with more than 75k will get a 5% raise up until a billion dollars
        a[n].salary *= 1.05;
      }
    }

}




void bonus(Person a[]){
  for (int n = 0; n < a.length; n ++){      //gives everyone $3000 to their salary
    if(a[n].age >= 18){
      a[n].salary += 3000;
    }
  }
}



void numbers(){
    if( array == true){
       hAveraging(people);        //this displays averages
       weightAveraging(people);
    } else if(array == false){    
       hAveraging(nik);        //this displays averages
       weightAveraging(nik);
    }
 
}

 
void weightAveraging(Person a[]){   //calculating average weight
  float average = 0;
  for(int n = 0; n < a.length; n++){
    average += a[n].weight;
  }
  average = int(average / a.length);
  text("Average weight : " + average + "lbs", 20, (1.3 * horizon) + 20);  //displaying weight average
}

void hAveraging(Person a[]){      //calculating average height
  int feet, inches;
  float average = 0;
  for(int n = 0; n < a.length; n++){
    average += a[n].h;
  }
  average = (average / a.length);
  feet = int(average/12);
  inches = int(average%12);
  text("Average height : " + feet + "'" + inches + "''", 20, 1.3 * horizon);    //displaying height average
}


void swap(Person[] c, int a, int b){    //swap function, needs array and array index of two persons, then switches their postitions  
  float hold;
  
  hold = c[a].x;
  c[a].x = c[b].x;
  c[b].x = hold;
}


void swapping(Person[] c, int a, int b){  //swapping was for order which does not work
  int hold;
  
  hold = a;
  c[a] = c[a+1];
  c[b] = c[b-1];
  
}

void tallest(Person[] a){
  
  float big = 0;
  int pos = 0;
  float position = 0;
  int xpos = 0;
  
  for (int n = 0; n < a.length; n ++){    //finding tallest person
    
    if( position < a[n].x){
      position = a[n].x;
      xpos = n;                  //remembers position of current person
    }
    
    if (big < a[n].h){
      big = a[n].h;          //rembers the index of tallest
      pos = n;
    }
  }
  
  swap(a, pos, xpos); //using swap to send the tallest to the end
  
}


void fattest(Person[] a){ //finding heaviest person
  
  float big = 0;
  int pos = 0;
  float position = 0;
  int xpos = 0;
  
  for (int n = 0; n < a.length; n ++){  
    
    if( position < a[n].x){        //remembers current person's position
      position = a[n].x;
      xpos = n;
    }
    
    if (big < a[n].weight){      //remembers the index of the heaviest
      big = a[n].weight;
      pos = n;
    }
  }
  
  swap(a, pos, xpos);    //swaps the heaviest to the end
  
}

void width(Person[] a){ //finding widest person
  
  float big = 0;
  int pos = 0;
  float position = 0;
  int xpos = 0;
  
  for (int n = 0; n < a.length; n ++){    
    
    if( position < a[n].x){            //current position of person n
      position = a[n].x;
      xpos = n;
    }
    
    if (big < a[n].w){        ///remembers index of widest
      big = a[n].w;
      pos = n;
    }
  }
  
  swap(a, pos, xpos);    //swaps widest to the end
  
}




//~~~    CLASSES    ~~~



class Person{
  
  float r,g,b;     //colors
  float w1, w2;    //roll width
  float h1, h2;    //roll height
  float w,h;       //width and height
  float x,y;       //x and y position
  
  int feet, inches;
  int weight;
  int age;
  int salary;
  
  String name;
  
  Person(){
    r = random(0,255);          //randomizing
    g = random(0,255);
    b = random(0,255);
    
    name = names[int(random(0,names.length))];
  }
  
  Person(float rr, float gg, float bb, String aa){    //People constructor that gets color and name
   r = rr; g = gg; b = bb; 
   name = aa;
  }
  
  void startup(){
    
    age = int(random(1,99.5));              //age between 1 and 99
    salary = int(random(1000,100000.5));    //salary between 1,000 and 100,000
    
    w1 = random(wmin/2,wmax/2);    //width and height can be adjusted in setup ^^
    w2 = random(wmin/2,wmax/2);    
    
    h1 = random(hmin/2,hmax/2);    
    h2 = random(hmin/2,hmax/2);
    
    w = w1 + w2;  //adding the random halves give a bell curve result
    h = h1 + h2;
    
  }
  
  void position(){
    y = horizon - (h/2);  //y position
  }
  
  void body(){
    noStroke();
    fill(r,g,b);
    rectMode(CENTER);
    rect(x,y,w,h);      //body
    ellipse(x, (y - (h/2) - (h/6)), w, h/3);  //head
    
    fill(0);
    arc(x, (y - (h/2) - (h/6)), w/1.5, h/4, 0, PI, CHORD);  //mouth
    ellipse(x - w/4, (y - (h/2) - (h/4)), w/8, w/8);        //eyes
    ellipse(x + w/4, (y - (h/2) - (h/4)), w/8, w/8);
  }
  
  void show(){
    body();
    info();
    messages();
  }
  
  void info(){ 
    feet = int((h/12));      //height
    feet -= 5;
    inches = int(h % 12);
    
    weight = int(((2 * h) * w)/50);  //weight is more dependent on height then width, divided by a number to get a reasonable weight
  }
  
  void messages(){
    textSize(11);
    text(name, x - w/2, y + h/2 + 25);                          //displaying name
    text(feet + "'" + inches + "''",x - w/2, y + h/2 + 40);     //displaying height
    text(weight + "lbs", x- w/2,  y + h/2 + 55);                //displaying weight
    text("$" + salary, x - w/2, y + h/2 +70);                   //displaying salary
    if (age < 18){
      salary = 0;    //setting salary to zero if less than 18
    }
    text( age, x - w/2, y + h/2 +85);                           //displaying age
    
  }
}




class Cloud{
 float x,y;
 float w;
 
 
 Cloud(float ww, float xx, float yy){   //constructor
   w = ww;
   x = xx;
   y = yy;
 }
 
 void movement(){   //moves left and resets when off the screen
   x +=1;
   if (x-600>width){    
     cloudStartup();
   }
 }
 
 void show(){
  fill(255,255,255,220);    //color and shape
  ellipse(x,y,w, w/2);
 }
}




class Button{
  
  float x,y;      //button has name, position, and boolean of press
  float gray;
  String name;
  boolean press;
  
  Button(float b, float c, String a){    //constructor for name and position
    name = a;
    x = b;
    y = c;
  }
  
  void startup(){
    gray = 0;
  }
  
  void press(){
    if ( dist(mouseX, mouseY, x,y) < 25 && mousePressed){   //finding if button is pressed
      press = true;
    }else{
      press = false;
    }
  }
  
  void show(){
    
   if ( dist(mouseX, mouseY, x,y) < 25){    //button turns gray if hovered over, more so if clicked
     gray = 50;
     if(mousePressed){
       gray = 100;
     }
   } else {
     gray = 0;
   }
      
   fill(0);
   rectMode(CENTER);      //shape of buttons
   ellipse(x,y, 55, 55);  //rim of button
   fill(255 - gray);
   ellipse(x,y, 50, 50);  //inner button that changes color
   fill(0);
   text( name ,x - 20, y+2);  //displaying name on button
  }
}



class Bird{
  
float x,y;
float dx, dy;
  
  void startup(){  //bird starts in top left corner
    x = 0;
    y = 0;
  }
  
  void movement(){
    float tall = 0;   //locates the tallest person then moves toward its shoulder
    int pos = 0;
    
    if (array == true){
      for (int n = 0; n < people.length; n++){    //finding tallest
        if (tall < people[n].h){
          tall = people[n].h;
          pos = n;
      }
    }
    dx = (people[pos].x - ((people[pos].w)/2) - x) /frameRate /1.5;   //moving to shoulder
    dy = (people[pos].y - ((people[pos].h)/2) - y) /frameRate /2;
    
    } else {
        for (int n = 0; n < nik.length; n++){    //finding tallest
          if (tall < nik[n].h){
            tall = nik[n].h;
            pos = n;
        }
      }
    dx = (nik[pos].x - ((nik[pos].w)/2) - x) /frameRate /1.5;   //moving to shoulder
    dy = (nik[pos].y - ((nik[pos].h)/2) - y) /frameRate /2;
    }
      

    
    x += dx;
    y += dy;
    
  show();
  }
  
  void show(){
    fill(200,200,41);
    ellipse(x,y, 20, 10);
      triangle(x-7, y, x+7, y, x, y+ (22*( sin(y) )) );  //bird flaps its wings from sin y for smooth animation
  }
}
